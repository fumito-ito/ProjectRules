<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="/favicon.svg" type="image/svg+xml">
  <title>projectrules.io</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background: #f8f8f8;
    }
    .hero {
      background: #007acc;
      color: white;
      padding: 60px 20px;
      text-align: center;
    }
    .hero h1 {
      margin: 0;
      font-size: 3em;
    }
    .hero p {
      font-size: 1.2em;
      margin-top: 10px;
    }
    .container {
      padding: 40px 20px;
      text-align: center;
    }
    .multi-select-container {
      border: 1px solid #ccc;
      border-radius: 4px;
      padding: 5px;
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      position: relative;
      background: #fff;
      min-height: 40px;
      margin: 0 auto;
      max-width: 600px;
    }
    .multi-select-container .tag {
      background-color: #007acc;
      color: #fff;
      padding: 5px 10px;
      border-radius: 15px;
      margin: 3px;
      display: flex;
      align-items: center;
      font-size: 0.9em;
    }
    .multi-select-container .tag .remove {
      margin-left: 5px;
      cursor: pointer;
      font-weight: bold;
    }
    .multi-select-container input {
      border: none;
      flex: 1;
      min-width: 150px;
      font-size: 1em;
      outline: none;
      padding: 5px;
    }
    .suggestions-list {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      border: 1px solid #ccc;
      border-top: none;
      background: #fff;
      z-index: 1000;
      max-height: 150px;
      overflow-y: auto;
      display: none;
      list-style: none;
      margin: 0;
      padding: 0;
    }
    .suggestions-list.active {
      display: block;
    }
    .suggestions-list li {
      padding: 8px 12px;
      cursor: pointer;
    }
    .suggestions-list li.active,
    .suggestions-list li:hover {
      background-color: #e0e0e0;
    }
    button {
      padding: 10px 20px;
      font-size: 1em;
      margin-top: 20px;
      border: none;
      border-radius: 4px;
      background: #007acc;
      color: white;
      cursor: pointer;
    }
    button:hover {
      background: #005fa3;
    }
  </style>
</head>
<body>
  <div class="hero">
    <h1>project-rules.io</h1>
    <p>Generate useful .mdc files for your cursor project.</p>
  </div>
  <div class="container">
    <div class="multi-select-container" id="multiSelect">
      <input type="text" id="multiSelectInput" placeholder="Search Context, Category, or Languages" autocomplete="off">
      <ul class="suggestions-list" id="suggestionsList"></ul>
    </div>
    <br>
    <button id="createButton">Create</button>
  </div>
  <script>
    // The suggestions array is inserted from the server-side
    const suggestions = {{suggestions}};
    (function(){
      const maxSuggestions = 3;
      const selectedItems = [];
      let activeSuggestionIndex = -1;

      const container = document.getElementById("multiSelect");
      const input = document.getElementById("multiSelectInput");
      const suggestionsList = document.getElementById("suggestionsList");

      function renderSuggestions() {
        const query = input.value.toLowerCase().trim();
        suggestionsList.innerHTML = "";
        activeSuggestionIndex = -1;
        if(query.length < 1) {
          suggestionsList.classList.remove("active");
          return;
        }
        const filtered = suggestions.filter(s => s.includes(query) && !selectedItems.includes(s)).slice(0, maxSuggestions);
        if(filtered.length === 0) {
          suggestionsList.classList.remove("active");
          return;
        }
        filtered.forEach((s, index) => {
          const li = document.createElement("li");
          li.textContent = s;
          li.dataset.index = index;
          li.addEventListener("mousedown", e => { e.preventDefault(); });
          li.addEventListener("click", function() {
            addTag(s);
            input.value = "";
            renderSuggestions();
          });
          suggestionsList.appendChild(li);
        });
        suggestionsList.classList.add("active");
      }

      function updateActiveSuggestion() {
        const items = suggestionsList.querySelectorAll("li");
        items.forEach((item, index) => {
          if (index === activeSuggestionIndex) {
            item.classList.add("active");
          } else {
            item.classList.remove("active");
          }
        });
      }

      function addTag(tagText) {
        selectedItems.push(tagText);
        const tag = document.createElement("span");
        tag.classList.add("tag");
        tag.textContent = tagText;
        const removeIcon = document.createElement("span");
        removeIcon.classList.add("remove");
        removeIcon.textContent = "Ã—";
        removeIcon.addEventListener("click", function() {
          container.removeChild(tag);
          const idx = selectedItems.indexOf(tagText);
          if(idx > -1) {
            selectedItems.splice(idx, 1);
          }
        });
        tag.appendChild(removeIcon);
        container.insertBefore(tag, input);
      }

      input.addEventListener("input", renderSuggestions);

      input.addEventListener("keydown", function(e) {
        const items = suggestionsList.querySelectorAll("li");
        if (suggestionsList.classList.contains("active")) {
          if (e.key === "ArrowDown") {
            e.preventDefault();
            if(activeSuggestionIndex < items.length - 1) {
              activeSuggestionIndex++;
              updateActiveSuggestion();
            }
          } else if (e.key === "ArrowUp") {
            e.preventDefault();
            if(activeSuggestionIndex > 0) {
              activeSuggestionIndex--;
              updateActiveSuggestion();
            }
          } else if (e.key === "Enter") {
            e.preventDefault();
            if(activeSuggestionIndex >= 0 && activeSuggestionIndex < items.length) {
              const selectedText = items[activeSuggestionIndex].textContent;
              addTag(selectedText);
              input.value = "";
              suggestionsList.classList.remove("active");
              activeSuggestionIndex = -1;
            }
          }
        }
      });

      input.addEventListener("blur", function() {
        setTimeout(() => {
          const query = input.value.trim().toLowerCase();
          if(query !== "" && !suggestions.includes(query)) {
            input.value = "";
          }
          suggestionsList.classList.remove("active");
        }, 200);
      });

      input.addEventListener("focus", renderSuggestions);

      document.getElementById("createButton").addEventListener("click", function() {
        const allKeywords = selectedItems.join(",");
        if(allKeywords.length === 0) {
          alert("Please select at least one keyword.");
          return;
        }
        window.location.href = '/projectrules/api/' + encodeURIComponent(allKeywords);
      });
    })();
  </script>
</body>
</html>
